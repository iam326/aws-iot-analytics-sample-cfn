AWSTemplateFormatVersion: "2010-09-09"
Description: AWS IoT Analytics Sample

Parameters:
  NamePrefix:
    Type: String
  IoTCertificateName:
    Type: String

Resources:

  ### AWS IoT Core ###

  IoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "iot:*"
            Resource: "*"
      PolicyName: !Sub ${NamePrefix}_iot_policy

  IoTThing:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: !Sub ${NamePrefix}_iot_thing

  IoTPolicyPrincipalAttachment:
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties:
      PolicyName: !Ref IoTPolicy
      Principal: !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:cert/${IoTCertificateName}

  IoTThingPrincipalAttachment:
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties:
      ThingName: !Ref IoTThing
      Principal: !Sub arn:aws:iot:${AWS::Region}:${AWS::AccountId}:cert/${IoTCertificateName}

  ### AWS IoT Analytics ###

  IoTAnalyticsChannel:
    Type: AWS::IoTAnalytics::Channel
    Properties:
      ChannelName: !Sub ${NamePrefix}_iot_analytics_channel
      ChannelStorage:
        ServiceManagedS3: {}

  IoTAnalyticsDatastore:
    Type: AWS::IoTAnalytics::Datastore
    Properties:
      DatastoreName: !Sub ${NamePrefix}_iot_analytics_datastore
      DatastoreStorage:
        ServiceManagedS3: {}

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${NamePrefix}_pipeline_lambda_function
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Code:
        ZipFile: |
          import logging
          import sys

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          streamHandler = logging.StreamHandler(stream=sys.stdout)
          formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
          streamHandler.setFormatter(formatter)
          logger.addHandler(streamHandler)

          def lambda_handler(event, context):
            logger.info("event before processing: {}".format(event))

            for e in event:
              if 'temperature' in e:
                e['temperature_copy'] = e['temperature']

            logger.info("event after processing: {}".format(event))

            return event

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: iotanalytics.amazonaws.com

  IoTAnalyticsPipeline:
    Type: AWS::IoTAnalytics::Pipeline
    Properties:
      PipelineName: !Sub ${NamePrefix}_iot_analytics_pipeline
      PipelineActivities:
        - Channel:
            # データの取得元指定する
            Name: pipeline_channel_activity
            ChannelName: !Sub ${NamePrefix}_iot_analytics_channel
            Next: pipeline_add_attributes_activity
          AddAttributes:
            # 既存の属性 device を別の属性 id, name に変換する
            Name: pipeline_add_attributes_activity
            Attributes:
              device.id: id
              device.name: name
            Next: pipeline_remove_attributes_activity
          RemoveAttributes:
            # 既存の属性 device を削除する
            Name: pipeline_remove_attributes_activity
            Attributes:
              - device
            Next: pipeline_filter_activity
          Filter:
            # 温度が10~40の範囲にフィルタする
            Name: pipeline_filter_activity
            Filter: temperature >= 10 AND temperature <= 40
            Next: pipeline_math_activity
          Math:
            # 摂氏を華氏に変換して新しい属性 temperature_f を作る
            Name: pipeline_math_activity
            Attribute: temperature_f
            Math: temperature * 1.8 + 32
            Next: pipeline_lambda_activity
          Lambda:
            # Lambdaを叩いて新しい属性 temperature_copy を作る
            Name: pipeline_lambda_activity 
            BatchSize: 1 
            LambdaName: !Sub ${NamePrefix}_pipeline_lambda_function
            Next: pipeline_datastore_activity
          Datastore:
            # データの保存先指定する
            Name: pipeline_datastore_activity
            DatastoreName: !Sub ${NamePrefix}_iot_analytics_datastore

  IoTAnalyticsDataset:
    Type: AWS::IoTAnalytics::Dataset
    Properties:
      DatasetName: !Sub ${NamePrefix}_iot_analytics_dataset
      Actions:
        - ActionName: SqlAction
          QueryAction:
            # 当日分のデータのみ取得する
            SqlQuery: !Sub "SELECT * FROM ${NamePrefix}_iot_analytics_datastore WHERE __dt > current_date - interval '1' day"
      RetentionPeriod:
        NumberOfDays: 1
        Unlimited: false
      Triggers:
        - Schedule:
            ScheduleExpression: rate(5 minute)
    DependsOn: IoTAnalyticsDatastore

  IoTBatchPutMessageRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${NamePrefix}_iot_batch_put_message_role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "iotanalytics:BatchPutMessage"
                Resource: !Sub "arn:aws:iotanalytics:${AWS::Region}:${AWS::AccountId}:channel/${NamePrefix}_iot_analytics_channel"

  IoTTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub ${NamePrefix}_iot_topic_rule
      TopicRulePayload:
        Actions:
          - IotAnalytics:
              ChannelName: !Sub ${NamePrefix}_iot_analytics_channel
              RoleArn: !GetAtt IoTBatchPutMessageRole.Arn
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: false
        Sql: "SELECT * FROM 'iot/topic'"
